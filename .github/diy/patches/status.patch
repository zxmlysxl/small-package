--- a/luci-mod-status/htdocs/luci-static/resources/view/status/include/30_network.js
+++ b/luci-mod-status/htdocs/luci-static/resources/view/status/include/30_network.js
@@ -2,6 +2,7 @@
 'require baseclass';
 'require fs';
 'require network';
+'require rpc';
 
 function progressbar(value, max, byte) {
 	var vn = parseInt(value) || 0,
@@ -59,6 +60,11 @@ function renderbox(ifc, ipv6) {
 	]);
 }
 
+var callUserInfo = rpc.declare({
+    object: 'luci',
+    method: 'getOnlineUsers'
+});
+
 return baseclass.extend({
 	title: _('Network'),
 
@@ -67,7 +73,8 @@ return baseclass.extend({
 			fs.trimmed('/proc/sys/net/netfilter/nf_conntrack_count'),
 			fs.trimmed('/proc/sys/net/netfilter/nf_conntrack_max'),
 			network.getWANNetworks(),
-			network.getWAN6Networks()
+			network.getWAN6Networks(),
+			L.resolveDefault(callUserInfo(), {})
 		]);
 	},
 
@@ -75,7 +82,8 @@ return baseclass.extend({
 		var ct_count  = +data[0],
 		    ct_max    = +data[1],
 		    wan_nets  = data[2],
-		    wan6_nets = data[3];
+		    wan6_nets = data[3],
+		    userinfo = data[4];
 
 		var fields = [
 			_('Active Connections'), ct_max ? ct_count : null
@@ -90,6 +98,10 @@ return baseclass.extend({
 					(fields[i + 1] != null) ? progressbar(fields[i + 1], ct_max) : '?'
 				])
 			]));
+			ctstatus.appendChild(E('div', { 'class': 'tr' }, [
+				E('div', { 'class': 'td left' }, _('Online Users')),
+				E('div', { 'class': 'td left' },  userinfo.onlineusers)
+			]));
 		}
 
 		var netstatus = E('div', { 'class': 'network-status-table' });

--- a/luci-mod-status/htdocs/luci-static/resources/view/status/include/20_memory.js
+++ b/luci-mod-status/htdocs/luci-static/resources/view/status/include/20_memory.js
@@ -32,8 +32,7 @@ return baseclass.extend({
 		    swap = L.isObject(systeminfo.swap) ? systeminfo.swap : {};
 
 		var fields = [
-			_('Total Available'), (mem.available) ? mem.available : (mem.total && mem.free && mem.buffered) ? mem.free + mem.buffered : null, mem.total,
-			_('Used'),            (mem.total && mem.free) ? (mem.total - mem.free) : null, mem.total,
+			_('Used'),            (mem.total && mem.available) ? (mem.total - mem.free - mem.buffered - mem.cached) : null, mem.total,
 		];
 
 		if (mem.buffered)
@@ -43,9 +42,9 @@ return baseclass.extend({
 			fields.push(_('Cached'), mem.cached, mem.total);
 
 		if (swap.total > 0)
-			fields.push(_('Swap free'), swap.free, swap.total);
+			fields.push(_('Swap used'), swap.total - swap.free, swap.total);
 
-		var table = E('table', { 'class': 'table' });
+		var table = E('table', { 'class': 'table memory' });
 
 		for (var i = 0; i < fields.length; i += 3) {
 			table.appendChild(E('tr', { 'class': 'tr' }, [

--- a/luci-mod-status/htdocs/luci-static/resources/view/status/nftables.js
+++ b/luci-mod-status/htdocs/luci-static/resources/view/status/nftables.js
@@ -669,7 +669,6 @@ return view.extend({
 	checkLegacyRules: function(ipt4save, ipt6save) {
 		if (ipt4save.match(/\n-A /) || ipt6save.match(/\n-A /)) {
 			ui.addNotification(_('Legacy rules detected'), [
-				E('p', _('There are legacy iptables rules present on the system. Mixing iptables and nftables rules is discouraged and may lead to incomplete traffic filtering.')),
 				E('button', {
 					'class': 'btn cbi-button',
 					'click': function() { location.href = 'nftables/iptables' }

--- a/luci-mod-system/root/usr/share/rpcd/acl.d/luci-mod-system.json
+++ b/luci-mod-system/root/usr/share/rpcd/acl.d/luci-mod-system.json
@@ -3,7 +3,7 @@
 		"description": "Grant access to system configuration",
 		"read": {
 			"ubus": {
-				"luci": [ "getInitList", "getLEDs", "getTimezones", "getUSBDevices" ],
+				"luci": [ "getInitList", "getLEDs", "getTimezones", "getUSBDevices", "getCPUInfo", "getETHInfo", "getTempInfo", "getCPUBench", "getCPUUsage", "getOnlineUsers" ],
 				"system": [ "info" ]
 			},
 			"uci": [ "luci", "system" ]

--- a/luci-mod-status/htdocs/luci-static/resources/view/status/include/10_system.js
+++ b/luci-mod-status/htdocs/luci-static/resources/view/status/include/10_system.js
@@ -13,6 +13,26 @@ var callSystemInfo = rpc.declare({
 	method: 'info'
 });
 
+var callCPUBench = rpc.declare({
+	object: 'luci',
+	method: 'getCPUBench'
+});
+
+var callCPUInfo = rpc.declare({
+	object: 'luci',
+	method: 'getCPUInfo'
+});
+
+var callCPUUsage = rpc.declare({
+	object: 'luci',
+	method: 'getCPUUsage'
+});
+
+var callTempInfo = rpc.declare({
+	object: 'luci',
+	method: 'getTempInfo'
+});
+
 return baseclass.extend({
 	title: _('System'),
 
@@ -20,6 +40,10 @@ return baseclass.extend({
 		return Promise.all([
 			L.resolveDefault(callSystemBoard(), {}),
 			L.resolveDefault(callSystemInfo(), {}),
+			L.resolveDefault(callCPUBench(), {}),
+			L.resolveDefault(callCPUInfo(), {}),
+			L.resolveDefault(callCPUUsage(), {}),
+			L.resolveDefault(callTempInfo(), {}),
 			fs.lines('/usr/lib/lua/luci/version.lua')
 		]);
 	},
@@ -27,7 +51,11 @@ return baseclass.extend({
 	render: function(data) {
 		var boardinfo   = data[0],
 		    systeminfo  = data[1],
-		    luciversion = data[2];
+		    cpubench    = data[2],
+		    cpuinfo     = data[3],
+		    cpuusage    = data[4],
+		    tempinfo    = data[5],
+		    luciversion = data[6];
 
 		luciversion = luciversion.filter(function(l) {
 			return l.match(/^\s*(luciname|luciversion)\s*=/);
@@ -52,8 +80,6 @@ return baseclass.extend({
 
 		var fields = [
 			_('Hostname'),         boardinfo.hostname,
-			_('Model'),            boardinfo.model,
-			_('Architecture'),     boardinfo.system,
 			_('Target Platform'),  (L.isObject(boardinfo.release) ? boardinfo.release.target : ''),
 			_('Firmware Version'), (L.isObject(boardinfo.release) ? boardinfo.release.description + ' / ' : '') + (luciversion || ''),
 			_('Kernel Version'),   boardinfo.kernel,
@@ -66,6 +92,24 @@ return baseclass.extend({
 			) : null
 		];
 
+		if (tempinfo.tempinfo) {
+			fields.splice(6, 0, _('Temperature'));
+			fields.splice(7, 0, tempinfo.tempinfo);
+		}
+		if (boardinfo.model == "Default string Default string") {
+			if (cpuinfo.cpuinfo) {
+			fields.splice(2, 0, _('Architecture'));
+			fields.splice(3, 0, cpuinfo.cpuinfo + cpubench.cpubench);
+			}
+		} else {
+			fields.splice(2, 0, _('Model'));
+			fields.splice(3, 0, boardinfo.model + cpubench.cpubench);
+			if (cpuinfo.cpuinfo) {
+			fields.splice(4, 0, _('Architecture'));
+			fields.splice(5, 0, cpuinfo.cpuinfo);
+			}
+		}
+
 		var table = E('table', { 'class': 'table' });
 
 		for (var i = 0; i < fields.length; i += 2) {
